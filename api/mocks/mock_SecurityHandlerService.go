// Code generated by mockery v2.52.2. DO NOT EDIT.

package apimocks

import (
	context "github.com/a-novel-kit/context"
	mock "github.com/stretchr/testify/mock"

	models "github.com/a-novel/authentication/models"
)

// MockSecurityHandlerService is an autogenerated mock type for the SecurityHandlerService type
type MockSecurityHandlerService struct {
	mock.Mock
}

type MockSecurityHandlerService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSecurityHandlerService) EXPECT() *MockSecurityHandlerService_Expecter {
	return &MockSecurityHandlerService_Expecter{mock: &_m.Mock}
}

// Authenticate provides a mock function with given fields: ctx, accessToken
func (_m *MockSecurityHandlerService) Authenticate(ctx context.Context, accessToken string) (*models.AccessTokenClaims, error) {
	ret := _m.Called(ctx, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 *models.AccessTokenClaims
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.AccessTokenClaims, error)); ok {
		return rf(ctx, accessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.AccessTokenClaims); ok {
		r0 = rf(ctx, accessToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AccessTokenClaims)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSecurityHandlerService_Authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authenticate'
type MockSecurityHandlerService_Authenticate_Call struct {
	*mock.Call
}

// Authenticate is a helper method to define mock.On call
//   - ctx context.Context
//   - accessToken string
func (_e *MockSecurityHandlerService_Expecter) Authenticate(ctx interface{}, accessToken interface{}) *MockSecurityHandlerService_Authenticate_Call {
	return &MockSecurityHandlerService_Authenticate_Call{Call: _e.mock.On("Authenticate", ctx, accessToken)}
}

func (_c *MockSecurityHandlerService_Authenticate_Call) Run(run func(ctx context.Context, accessToken string)) *MockSecurityHandlerService_Authenticate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSecurityHandlerService_Authenticate_Call) Return(_a0 *models.AccessTokenClaims, _a1 error) *MockSecurityHandlerService_Authenticate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSecurityHandlerService_Authenticate_Call) RunAndReturn(run func(context.Context, string) (*models.AccessTokenClaims, error)) *MockSecurityHandlerService_Authenticate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSecurityHandlerService creates a new instance of MockSecurityHandlerService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSecurityHandlerService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSecurityHandlerService {
	mock := &MockSecurityHandlerService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
