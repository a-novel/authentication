// Code generated by mockery v2.53.1. DO NOT EDIT.

package apimocks

import (
	context "github.com/a-novel-kit/context"
	mock "github.com/stretchr/testify/mock"

	services "github.com/a-novel/service-authentication/internal/services"
)

// MockUpdatePasswordService is an autogenerated mock type for the UpdatePasswordService type
type MockUpdatePasswordService struct {
	mock.Mock
}

type MockUpdatePasswordService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUpdatePasswordService) EXPECT() *MockUpdatePasswordService_Expecter {
	return &MockUpdatePasswordService_Expecter{mock: &_m.Mock}
}

// UpdatePassword provides a mock function with given fields: ctx, request
func (_m *MockUpdatePasswordService) UpdatePassword(ctx context.Context, request services.UpdatePasswordRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, services.UpdatePasswordRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUpdatePasswordService_UpdatePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePassword'
type MockUpdatePasswordService_UpdatePassword_Call struct {
	*mock.Call
}

// UpdatePassword is a helper method to define mock.On call
//   - ctx context.Context
//   - request services.UpdatePasswordRequest
func (_e *MockUpdatePasswordService_Expecter) UpdatePassword(ctx interface{}, request interface{}) *MockUpdatePasswordService_UpdatePassword_Call {
	return &MockUpdatePasswordService_UpdatePassword_Call{Call: _e.mock.On("UpdatePassword", ctx, request)}
}

func (_c *MockUpdatePasswordService_UpdatePassword_Call) Run(run func(ctx context.Context, request services.UpdatePasswordRequest)) *MockUpdatePasswordService_UpdatePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(services.UpdatePasswordRequest))
	})
	return _c
}

func (_c *MockUpdatePasswordService_UpdatePassword_Call) Return(_a0 error) *MockUpdatePasswordService_UpdatePassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUpdatePasswordService_UpdatePassword_Call) RunAndReturn(run func(context.Context, services.UpdatePasswordRequest) error) *MockUpdatePasswordService_UpdatePassword_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUpdatePasswordService creates a new instance of MockUpdatePasswordService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUpdatePasswordService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUpdatePasswordService {
	mock := &MockUpdatePasswordService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
