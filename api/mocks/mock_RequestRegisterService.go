// Code generated by mockery v2.53.1. DO NOT EDIT.

package apimocks

import (
	context "github.com/a-novel-kit/context"
	mock "github.com/stretchr/testify/mock"

	models "github.com/a-novel/service-authentication/models"

	services "github.com/a-novel/service-authentication/internal/services"
)

// MockRequestRegisterService is an autogenerated mock type for the RequestRegisterService type
type MockRequestRegisterService struct {
	mock.Mock
}

type MockRequestRegisterService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRequestRegisterService) EXPECT() *MockRequestRegisterService_Expecter {
	return &MockRequestRegisterService_Expecter{mock: &_m.Mock}
}

// RequestRegister provides a mock function with given fields: ctx, request
func (_m *MockRequestRegisterService) RequestRegister(ctx context.Context, request services.RequestRegisterRequest) (*models.ShortCode, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for RequestRegister")
	}

	var r0 *models.ShortCode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, services.RequestRegisterRequest) (*models.ShortCode, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, services.RequestRegisterRequest) *models.ShortCode); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ShortCode)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, services.RequestRegisterRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRequestRegisterService_RequestRegister_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestRegister'
type MockRequestRegisterService_RequestRegister_Call struct {
	*mock.Call
}

// RequestRegister is a helper method to define mock.On call
//   - ctx context.Context
//   - request services.RequestRegisterRequest
func (_e *MockRequestRegisterService_Expecter) RequestRegister(ctx interface{}, request interface{}) *MockRequestRegisterService_RequestRegister_Call {
	return &MockRequestRegisterService_RequestRegister_Call{Call: _e.mock.On("RequestRegister", ctx, request)}
}

func (_c *MockRequestRegisterService_RequestRegister_Call) Run(run func(ctx context.Context, request services.RequestRegisterRequest)) *MockRequestRegisterService_RequestRegister_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(services.RequestRegisterRequest))
	})
	return _c
}

func (_c *MockRequestRegisterService_RequestRegister_Call) Return(_a0 *models.ShortCode, _a1 error) *MockRequestRegisterService_RequestRegister_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRequestRegisterService_RequestRegister_Call) RunAndReturn(run func(context.Context, services.RequestRegisterRequest) (*models.ShortCode, error)) *MockRequestRegisterService_RequestRegister_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRequestRegisterService creates a new instance of MockRequestRegisterService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRequestRegisterService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRequestRegisterService {
	mock := &MockRequestRegisterService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
