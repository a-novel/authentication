// Code generated by mockery v2.53.1. DO NOT EDIT.

package servicesmocks

import (
	context "github.com/a-novel-kit/context"
	mock "github.com/stretchr/testify/mock"

	services "github.com/a-novel/service-authentication/internal/services"
)

// MockLoginAnonSource is an autogenerated mock type for the LoginAnonSource type
type MockLoginAnonSource struct {
	mock.Mock
}

type MockLoginAnonSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLoginAnonSource) EXPECT() *MockLoginAnonSource_Expecter {
	return &MockLoginAnonSource_Expecter{mock: &_m.Mock}
}

// IssueToken provides a mock function with given fields: ctx, request
func (_m *MockLoginAnonSource) IssueToken(ctx context.Context, request services.IssueTokenRequest) (string, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for IssueToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, services.IssueTokenRequest) (string, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, services.IssueTokenRequest) string); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, services.IssueTokenRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLoginAnonSource_IssueToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IssueToken'
type MockLoginAnonSource_IssueToken_Call struct {
	*mock.Call
}

// IssueToken is a helper method to define mock.On call
//   - ctx context.Context
//   - request services.IssueTokenRequest
func (_e *MockLoginAnonSource_Expecter) IssueToken(ctx interface{}, request interface{}) *MockLoginAnonSource_IssueToken_Call {
	return &MockLoginAnonSource_IssueToken_Call{Call: _e.mock.On("IssueToken", ctx, request)}
}

func (_c *MockLoginAnonSource_IssueToken_Call) Run(run func(ctx context.Context, request services.IssueTokenRequest)) *MockLoginAnonSource_IssueToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(services.IssueTokenRequest))
	})
	return _c
}

func (_c *MockLoginAnonSource_IssueToken_Call) Return(_a0 string, _a1 error) *MockLoginAnonSource_IssueToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLoginAnonSource_IssueToken_Call) RunAndReturn(run func(context.Context, services.IssueTokenRequest) (string, error)) *MockLoginAnonSource_IssueToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLoginAnonSource creates a new instance of MockLoginAnonSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLoginAnonSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLoginAnonSource {
	mock := &MockLoginAnonSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
