// Code generated by mockery v2.52.2. DO NOT EDIT.

package servicesmocks

import (
	context "github.com/a-novel-kit/context"
	dao "github.com/a-novel/authentication/internal/dao"
	mock "github.com/stretchr/testify/mock"

	models "github.com/a-novel/authentication/models"

	services "github.com/a-novel/authentication/internal/services"
)

// MockRequestPasswordResetSource is an autogenerated mock type for the RequestPasswordResetSource type
type MockRequestPasswordResetSource struct {
	mock.Mock
}

type MockRequestPasswordResetSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRequestPasswordResetSource) EXPECT() *MockRequestPasswordResetSource_Expecter {
	return &MockRequestPasswordResetSource_Expecter{mock: &_m.Mock}
}

// CreateShortCode provides a mock function with given fields: ctx, request
func (_m *MockRequestPasswordResetSource) CreateShortCode(ctx context.Context, request services.CreateShortCodeRequest) (*models.ShortCode, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateShortCode")
	}

	var r0 *models.ShortCode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, services.CreateShortCodeRequest) (*models.ShortCode, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, services.CreateShortCodeRequest) *models.ShortCode); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ShortCode)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, services.CreateShortCodeRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRequestPasswordResetSource_CreateShortCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateShortCode'
type MockRequestPasswordResetSource_CreateShortCode_Call struct {
	*mock.Call
}

// CreateShortCode is a helper method to define mock.On call
//   - ctx context.Context
//   - request services.CreateShortCodeRequest
func (_e *MockRequestPasswordResetSource_Expecter) CreateShortCode(ctx interface{}, request interface{}) *MockRequestPasswordResetSource_CreateShortCode_Call {
	return &MockRequestPasswordResetSource_CreateShortCode_Call{Call: _e.mock.On("CreateShortCode", ctx, request)}
}

func (_c *MockRequestPasswordResetSource_CreateShortCode_Call) Run(run func(ctx context.Context, request services.CreateShortCodeRequest)) *MockRequestPasswordResetSource_CreateShortCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(services.CreateShortCodeRequest))
	})
	return _c
}

func (_c *MockRequestPasswordResetSource_CreateShortCode_Call) Return(_a0 *models.ShortCode, _a1 error) *MockRequestPasswordResetSource_CreateShortCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRequestPasswordResetSource_CreateShortCode_Call) RunAndReturn(run func(context.Context, services.CreateShortCodeRequest) (*models.ShortCode, error)) *MockRequestPasswordResetSource_CreateShortCode_Call {
	_c.Call.Return(run)
	return _c
}

// SelectCredentialsByEmail provides a mock function with given fields: ctx, email
func (_m *MockRequestPasswordResetSource) SelectCredentialsByEmail(ctx context.Context, email string) (*dao.CredentialsEntity, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for SelectCredentialsByEmail")
	}

	var r0 *dao.CredentialsEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*dao.CredentialsEntity, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *dao.CredentialsEntity); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.CredentialsEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRequestPasswordResetSource_SelectCredentialsByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectCredentialsByEmail'
type MockRequestPasswordResetSource_SelectCredentialsByEmail_Call struct {
	*mock.Call
}

// SelectCredentialsByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockRequestPasswordResetSource_Expecter) SelectCredentialsByEmail(ctx interface{}, email interface{}) *MockRequestPasswordResetSource_SelectCredentialsByEmail_Call {
	return &MockRequestPasswordResetSource_SelectCredentialsByEmail_Call{Call: _e.mock.On("SelectCredentialsByEmail", ctx, email)}
}

func (_c *MockRequestPasswordResetSource_SelectCredentialsByEmail_Call) Run(run func(ctx context.Context, email string)) *MockRequestPasswordResetSource_SelectCredentialsByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRequestPasswordResetSource_SelectCredentialsByEmail_Call) Return(_a0 *dao.CredentialsEntity, _a1 error) *MockRequestPasswordResetSource_SelectCredentialsByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRequestPasswordResetSource_SelectCredentialsByEmail_Call) RunAndReturn(run func(context.Context, string) (*dao.CredentialsEntity, error)) *MockRequestPasswordResetSource_SelectCredentialsByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRequestPasswordResetSource creates a new instance of MockRequestPasswordResetSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRequestPasswordResetSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRequestPasswordResetSource {
	mock := &MockRequestPasswordResetSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
