// Code generated by mockery v2.53.1. DO NOT EDIT.

package servicesmocks

import (
	context "github.com/a-novel-kit/context"
	dao "github.com/a-novel/service-authentication/internal/dao"
	mock "github.com/stretchr/testify/mock"

	models "github.com/a-novel/service-authentication/models"

	services "github.com/a-novel/service-authentication/internal/services"

	uuid "github.com/google/uuid"
)

// MockUpdateEmailSource is an autogenerated mock type for the UpdateEmailSource type
type MockUpdateEmailSource struct {
	mock.Mock
}

type MockUpdateEmailSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUpdateEmailSource) EXPECT() *MockUpdateEmailSource_Expecter {
	return &MockUpdateEmailSource_Expecter{mock: &_m.Mock}
}

// ConsumeShortCode provides a mock function with given fields: ctx, request
func (_m *MockUpdateEmailSource) ConsumeShortCode(ctx context.Context, request services.ConsumeShortCodeRequest) (*models.ShortCode, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ConsumeShortCode")
	}

	var r0 *models.ShortCode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, services.ConsumeShortCodeRequest) (*models.ShortCode, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, services.ConsumeShortCodeRequest) *models.ShortCode); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ShortCode)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, services.ConsumeShortCodeRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUpdateEmailSource_ConsumeShortCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConsumeShortCode'
type MockUpdateEmailSource_ConsumeShortCode_Call struct {
	*mock.Call
}

// ConsumeShortCode is a helper method to define mock.On call
//   - ctx context.Context
//   - request services.ConsumeShortCodeRequest
func (_e *MockUpdateEmailSource_Expecter) ConsumeShortCode(ctx interface{}, request interface{}) *MockUpdateEmailSource_ConsumeShortCode_Call {
	return &MockUpdateEmailSource_ConsumeShortCode_Call{Call: _e.mock.On("ConsumeShortCode", ctx, request)}
}

func (_c *MockUpdateEmailSource_ConsumeShortCode_Call) Run(run func(ctx context.Context, request services.ConsumeShortCodeRequest)) *MockUpdateEmailSource_ConsumeShortCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(services.ConsumeShortCodeRequest))
	})
	return _c
}

func (_c *MockUpdateEmailSource_ConsumeShortCode_Call) Return(_a0 *models.ShortCode, _a1 error) *MockUpdateEmailSource_ConsumeShortCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUpdateEmailSource_ConsumeShortCode_Call) RunAndReturn(run func(context.Context, services.ConsumeShortCodeRequest) (*models.ShortCode, error)) *MockUpdateEmailSource_ConsumeShortCode_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCredentialsEmail provides a mock function with given fields: ctx, userID, data
func (_m *MockUpdateEmailSource) UpdateCredentialsEmail(ctx context.Context, userID uuid.UUID, data dao.UpdateCredentialsEmailData) (*dao.CredentialsEntity, error) {
	ret := _m.Called(ctx, userID, data)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCredentialsEmail")
	}

	var r0 *dao.CredentialsEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, dao.UpdateCredentialsEmailData) (*dao.CredentialsEntity, error)); ok {
		return rf(ctx, userID, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, dao.UpdateCredentialsEmailData) *dao.CredentialsEntity); ok {
		r0 = rf(ctx, userID, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.CredentialsEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, dao.UpdateCredentialsEmailData) error); ok {
		r1 = rf(ctx, userID, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUpdateEmailSource_UpdateCredentialsEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCredentialsEmail'
type MockUpdateEmailSource_UpdateCredentialsEmail_Call struct {
	*mock.Call
}

// UpdateCredentialsEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - data dao.UpdateCredentialsEmailData
func (_e *MockUpdateEmailSource_Expecter) UpdateCredentialsEmail(ctx interface{}, userID interface{}, data interface{}) *MockUpdateEmailSource_UpdateCredentialsEmail_Call {
	return &MockUpdateEmailSource_UpdateCredentialsEmail_Call{Call: _e.mock.On("UpdateCredentialsEmail", ctx, userID, data)}
}

func (_c *MockUpdateEmailSource_UpdateCredentialsEmail_Call) Run(run func(ctx context.Context, userID uuid.UUID, data dao.UpdateCredentialsEmailData)) *MockUpdateEmailSource_UpdateCredentialsEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(dao.UpdateCredentialsEmailData))
	})
	return _c
}

func (_c *MockUpdateEmailSource_UpdateCredentialsEmail_Call) Return(_a0 *dao.CredentialsEntity, _a1 error) *MockUpdateEmailSource_UpdateCredentialsEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUpdateEmailSource_UpdateCredentialsEmail_Call) RunAndReturn(run func(context.Context, uuid.UUID, dao.UpdateCredentialsEmailData) (*dao.CredentialsEntity, error)) *MockUpdateEmailSource_UpdateCredentialsEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUpdateEmailSource creates a new instance of MockUpdateEmailSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUpdateEmailSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUpdateEmailSource {
	mock := &MockUpdateEmailSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
