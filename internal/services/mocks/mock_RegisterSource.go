// Code generated by mockery v2.53.1. DO NOT EDIT.

package servicesmocks

import (
	context "github.com/a-novel-kit/context"
	dao "github.com/a-novel/authentication/internal/dao"
	mock "github.com/stretchr/testify/mock"

	models "github.com/a-novel/authentication/models"

	services "github.com/a-novel/authentication/internal/services"
)

// MockRegisterSource is an autogenerated mock type for the RegisterSource type
type MockRegisterSource struct {
	mock.Mock
}

type MockRegisterSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRegisterSource) EXPECT() *MockRegisterSource_Expecter {
	return &MockRegisterSource_Expecter{mock: &_m.Mock}
}

// ConsumeShortCode provides a mock function with given fields: ctx, request
func (_m *MockRegisterSource) ConsumeShortCode(ctx context.Context, request services.ConsumeShortCodeRequest) (*models.ShortCode, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ConsumeShortCode")
	}

	var r0 *models.ShortCode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, services.ConsumeShortCodeRequest) (*models.ShortCode, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, services.ConsumeShortCodeRequest) *models.ShortCode); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ShortCode)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, services.ConsumeShortCodeRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRegisterSource_ConsumeShortCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConsumeShortCode'
type MockRegisterSource_ConsumeShortCode_Call struct {
	*mock.Call
}

// ConsumeShortCode is a helper method to define mock.On call
//   - ctx context.Context
//   - request services.ConsumeShortCodeRequest
func (_e *MockRegisterSource_Expecter) ConsumeShortCode(ctx interface{}, request interface{}) *MockRegisterSource_ConsumeShortCode_Call {
	return &MockRegisterSource_ConsumeShortCode_Call{Call: _e.mock.On("ConsumeShortCode", ctx, request)}
}

func (_c *MockRegisterSource_ConsumeShortCode_Call) Run(run func(ctx context.Context, request services.ConsumeShortCodeRequest)) *MockRegisterSource_ConsumeShortCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(services.ConsumeShortCodeRequest))
	})
	return _c
}

func (_c *MockRegisterSource_ConsumeShortCode_Call) Return(_a0 *models.ShortCode, _a1 error) *MockRegisterSource_ConsumeShortCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRegisterSource_ConsumeShortCode_Call) RunAndReturn(run func(context.Context, services.ConsumeShortCodeRequest) (*models.ShortCode, error)) *MockRegisterSource_ConsumeShortCode_Call {
	_c.Call.Return(run)
	return _c
}

// InsertCredentials provides a mock function with given fields: ctx, data
func (_m *MockRegisterSource) InsertCredentials(ctx context.Context, data dao.InsertCredentialsData) (*dao.CredentialsEntity, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for InsertCredentials")
	}

	var r0 *dao.CredentialsEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dao.InsertCredentialsData) (*dao.CredentialsEntity, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dao.InsertCredentialsData) *dao.CredentialsEntity); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.CredentialsEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dao.InsertCredentialsData) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRegisterSource_InsertCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertCredentials'
type MockRegisterSource_InsertCredentials_Call struct {
	*mock.Call
}

// InsertCredentials is a helper method to define mock.On call
//   - ctx context.Context
//   - data dao.InsertCredentialsData
func (_e *MockRegisterSource_Expecter) InsertCredentials(ctx interface{}, data interface{}) *MockRegisterSource_InsertCredentials_Call {
	return &MockRegisterSource_InsertCredentials_Call{Call: _e.mock.On("InsertCredentials", ctx, data)}
}

func (_c *MockRegisterSource_InsertCredentials_Call) Run(run func(ctx context.Context, data dao.InsertCredentialsData)) *MockRegisterSource_InsertCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dao.InsertCredentialsData))
	})
	return _c
}

func (_c *MockRegisterSource_InsertCredentials_Call) Return(_a0 *dao.CredentialsEntity, _a1 error) *MockRegisterSource_InsertCredentials_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRegisterSource_InsertCredentials_Call) RunAndReturn(run func(context.Context, dao.InsertCredentialsData) (*dao.CredentialsEntity, error)) *MockRegisterSource_InsertCredentials_Call {
	_c.Call.Return(run)
	return _c
}

// IssueToken provides a mock function with given fields: ctx, request
func (_m *MockRegisterSource) IssueToken(ctx context.Context, request services.IssueTokenRequest) (string, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for IssueToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, services.IssueTokenRequest) (string, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, services.IssueTokenRequest) string); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, services.IssueTokenRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRegisterSource_IssueToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IssueToken'
type MockRegisterSource_IssueToken_Call struct {
	*mock.Call
}

// IssueToken is a helper method to define mock.On call
//   - ctx context.Context
//   - request services.IssueTokenRequest
func (_e *MockRegisterSource_Expecter) IssueToken(ctx interface{}, request interface{}) *MockRegisterSource_IssueToken_Call {
	return &MockRegisterSource_IssueToken_Call{Call: _e.mock.On("IssueToken", ctx, request)}
}

func (_c *MockRegisterSource_IssueToken_Call) Run(run func(ctx context.Context, request services.IssueTokenRequest)) *MockRegisterSource_IssueToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(services.IssueTokenRequest))
	})
	return _c
}

func (_c *MockRegisterSource_IssueToken_Call) Return(_a0 string, _a1 error) *MockRegisterSource_IssueToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRegisterSource_IssueToken_Call) RunAndReturn(run func(context.Context, services.IssueTokenRequest) (string, error)) *MockRegisterSource_IssueToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRegisterSource creates a new instance of MockRegisterSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRegisterSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRegisterSource {
	mock := &MockRegisterSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
