// Code generated by mockery v2.53.1. DO NOT EDIT.

package servicesmocks

import (
	context "github.com/a-novel-kit/context"
	dao "github.com/a-novel/service-authentication/internal/dao"
	mock "github.com/stretchr/testify/mock"

	models "github.com/a-novel/service-authentication/models"
)

// MockGenerateKeySource is an autogenerated mock type for the GenerateKeySource type
type MockGenerateKeySource struct {
	mock.Mock
}

type MockGenerateKeySource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGenerateKeySource) EXPECT() *MockGenerateKeySource_Expecter {
	return &MockGenerateKeySource_Expecter{mock: &_m.Mock}
}

// InsertKey provides a mock function with given fields: ctx, data
func (_m *MockGenerateKeySource) InsertKey(ctx context.Context, data dao.InsertKeyData) (*dao.KeyEntity, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for InsertKey")
	}

	var r0 *dao.KeyEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dao.InsertKeyData) (*dao.KeyEntity, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dao.InsertKeyData) *dao.KeyEntity); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.KeyEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dao.InsertKeyData) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGenerateKeySource_InsertKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertKey'
type MockGenerateKeySource_InsertKey_Call struct {
	*mock.Call
}

// InsertKey is a helper method to define mock.On call
//   - ctx context.Context
//   - data dao.InsertKeyData
func (_e *MockGenerateKeySource_Expecter) InsertKey(ctx interface{}, data interface{}) *MockGenerateKeySource_InsertKey_Call {
	return &MockGenerateKeySource_InsertKey_Call{Call: _e.mock.On("InsertKey", ctx, data)}
}

func (_c *MockGenerateKeySource_InsertKey_Call) Run(run func(ctx context.Context, data dao.InsertKeyData)) *MockGenerateKeySource_InsertKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dao.InsertKeyData))
	})
	return _c
}

func (_c *MockGenerateKeySource_InsertKey_Call) Return(_a0 *dao.KeyEntity, _a1 error) *MockGenerateKeySource_InsertKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGenerateKeySource_InsertKey_Call) RunAndReturn(run func(context.Context, dao.InsertKeyData) (*dao.KeyEntity, error)) *MockGenerateKeySource_InsertKey_Call {
	_c.Call.Return(run)
	return _c
}

// SearchKeys provides a mock function with given fields: ctx, usage
func (_m *MockGenerateKeySource) SearchKeys(ctx context.Context, usage models.KeyUsage) ([]*dao.KeyEntity, error) {
	ret := _m.Called(ctx, usage)

	if len(ret) == 0 {
		panic("no return value specified for SearchKeys")
	}

	var r0 []*dao.KeyEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.KeyUsage) ([]*dao.KeyEntity, error)); ok {
		return rf(ctx, usage)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.KeyUsage) []*dao.KeyEntity); ok {
		r0 = rf(ctx, usage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dao.KeyEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.KeyUsage) error); ok {
		r1 = rf(ctx, usage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGenerateKeySource_SearchKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchKeys'
type MockGenerateKeySource_SearchKeys_Call struct {
	*mock.Call
}

// SearchKeys is a helper method to define mock.On call
//   - ctx context.Context
//   - usage models.KeyUsage
func (_e *MockGenerateKeySource_Expecter) SearchKeys(ctx interface{}, usage interface{}) *MockGenerateKeySource_SearchKeys_Call {
	return &MockGenerateKeySource_SearchKeys_Call{Call: _e.mock.On("SearchKeys", ctx, usage)}
}

func (_c *MockGenerateKeySource_SearchKeys_Call) Run(run func(ctx context.Context, usage models.KeyUsage)) *MockGenerateKeySource_SearchKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.KeyUsage))
	})
	return _c
}

func (_c *MockGenerateKeySource_SearchKeys_Call) Return(_a0 []*dao.KeyEntity, _a1 error) *MockGenerateKeySource_SearchKeys_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGenerateKeySource_SearchKeys_Call) RunAndReturn(run func(context.Context, models.KeyUsage) ([]*dao.KeyEntity, error)) *MockGenerateKeySource_SearchKeys_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGenerateKeySource creates a new instance of MockGenerateKeySource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGenerateKeySource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGenerateKeySource {
	mock := &MockGenerateKeySource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
