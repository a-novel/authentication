// Code generated by mockery v2.53.1. DO NOT EDIT.

package servicesmocks

import (
	context "github.com/a-novel-kit/context"
	dao "github.com/a-novel/service-authentication/internal/dao"
	mock "github.com/stretchr/testify/mock"
)

// MockConsumeShortCodeSource is an autogenerated mock type for the ConsumeShortCodeSource type
type MockConsumeShortCodeSource struct {
	mock.Mock
}

type MockConsumeShortCodeSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConsumeShortCodeSource) EXPECT() *MockConsumeShortCodeSource_Expecter {
	return &MockConsumeShortCodeSource_Expecter{mock: &_m.Mock}
}

// DeleteShortCode provides a mock function with given fields: ctx, data
func (_m *MockConsumeShortCodeSource) DeleteShortCode(ctx context.Context, data dao.DeleteShortCodeData) (*dao.ShortCodeEntity, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for DeleteShortCode")
	}

	var r0 *dao.ShortCodeEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dao.DeleteShortCodeData) (*dao.ShortCodeEntity, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dao.DeleteShortCodeData) *dao.ShortCodeEntity); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.ShortCodeEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dao.DeleteShortCodeData) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConsumeShortCodeSource_DeleteShortCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteShortCode'
type MockConsumeShortCodeSource_DeleteShortCode_Call struct {
	*mock.Call
}

// DeleteShortCode is a helper method to define mock.On call
//   - ctx context.Context
//   - data dao.DeleteShortCodeData
func (_e *MockConsumeShortCodeSource_Expecter) DeleteShortCode(ctx interface{}, data interface{}) *MockConsumeShortCodeSource_DeleteShortCode_Call {
	return &MockConsumeShortCodeSource_DeleteShortCode_Call{Call: _e.mock.On("DeleteShortCode", ctx, data)}
}

func (_c *MockConsumeShortCodeSource_DeleteShortCode_Call) Run(run func(ctx context.Context, data dao.DeleteShortCodeData)) *MockConsumeShortCodeSource_DeleteShortCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dao.DeleteShortCodeData))
	})
	return _c
}

func (_c *MockConsumeShortCodeSource_DeleteShortCode_Call) Return(_a0 *dao.ShortCodeEntity, _a1 error) *MockConsumeShortCodeSource_DeleteShortCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConsumeShortCodeSource_DeleteShortCode_Call) RunAndReturn(run func(context.Context, dao.DeleteShortCodeData) (*dao.ShortCodeEntity, error)) *MockConsumeShortCodeSource_DeleteShortCode_Call {
	_c.Call.Return(run)
	return _c
}

// SelectShortCodeByParams provides a mock function with given fields: ctx, data
func (_m *MockConsumeShortCodeSource) SelectShortCodeByParams(ctx context.Context, data dao.SelectShortCodeByParamsData) (*dao.ShortCodeEntity, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for SelectShortCodeByParams")
	}

	var r0 *dao.ShortCodeEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dao.SelectShortCodeByParamsData) (*dao.ShortCodeEntity, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dao.SelectShortCodeByParamsData) *dao.ShortCodeEntity); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.ShortCodeEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dao.SelectShortCodeByParamsData) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConsumeShortCodeSource_SelectShortCodeByParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectShortCodeByParams'
type MockConsumeShortCodeSource_SelectShortCodeByParams_Call struct {
	*mock.Call
}

// SelectShortCodeByParams is a helper method to define mock.On call
//   - ctx context.Context
//   - data dao.SelectShortCodeByParamsData
func (_e *MockConsumeShortCodeSource_Expecter) SelectShortCodeByParams(ctx interface{}, data interface{}) *MockConsumeShortCodeSource_SelectShortCodeByParams_Call {
	return &MockConsumeShortCodeSource_SelectShortCodeByParams_Call{Call: _e.mock.On("SelectShortCodeByParams", ctx, data)}
}

func (_c *MockConsumeShortCodeSource_SelectShortCodeByParams_Call) Run(run func(ctx context.Context, data dao.SelectShortCodeByParamsData)) *MockConsumeShortCodeSource_SelectShortCodeByParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dao.SelectShortCodeByParamsData))
	})
	return _c
}

func (_c *MockConsumeShortCodeSource_SelectShortCodeByParams_Call) Return(_a0 *dao.ShortCodeEntity, _a1 error) *MockConsumeShortCodeSource_SelectShortCodeByParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConsumeShortCodeSource_SelectShortCodeByParams_Call) RunAndReturn(run func(context.Context, dao.SelectShortCodeByParamsData) (*dao.ShortCodeEntity, error)) *MockConsumeShortCodeSource_SelectShortCodeByParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConsumeShortCodeSource creates a new instance of MockConsumeShortCodeSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConsumeShortCodeSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConsumeShortCodeSource {
	mock := &MockConsumeShortCodeSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
