// Code generated by mockery v2.53.1. DO NOT EDIT.

package servicesmocks

import (
	context "github.com/a-novel-kit/context"
	dao "github.com/a-novel/authentication/internal/dao"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockUpdateRoleSource is an autogenerated mock type for the UpdateRoleSource type
type MockUpdateRoleSource struct {
	mock.Mock
}

type MockUpdateRoleSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUpdateRoleSource) EXPECT() *MockUpdateRoleSource_Expecter {
	return &MockUpdateRoleSource_Expecter{mock: &_m.Mock}
}

// SelectCredentials provides a mock function with given fields: ctx, id
func (_m *MockUpdateRoleSource) SelectCredentials(ctx context.Context, id uuid.UUID) (*dao.CredentialsEntity, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for SelectCredentials")
	}

	var r0 *dao.CredentialsEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*dao.CredentialsEntity, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *dao.CredentialsEntity); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.CredentialsEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUpdateRoleSource_SelectCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectCredentials'
type MockUpdateRoleSource_SelectCredentials_Call struct {
	*mock.Call
}

// SelectCredentials is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockUpdateRoleSource_Expecter) SelectCredentials(ctx interface{}, id interface{}) *MockUpdateRoleSource_SelectCredentials_Call {
	return &MockUpdateRoleSource_SelectCredentials_Call{Call: _e.mock.On("SelectCredentials", ctx, id)}
}

func (_c *MockUpdateRoleSource_SelectCredentials_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockUpdateRoleSource_SelectCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockUpdateRoleSource_SelectCredentials_Call) Return(_a0 *dao.CredentialsEntity, _a1 error) *MockUpdateRoleSource_SelectCredentials_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUpdateRoleSource_SelectCredentials_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*dao.CredentialsEntity, error)) *MockUpdateRoleSource_SelectCredentials_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCredentialsRole provides a mock function with given fields: ctx, userID, data
func (_m *MockUpdateRoleSource) UpdateCredentialsRole(ctx context.Context, userID uuid.UUID, data dao.UpdateCredentialsRoleData) (*dao.CredentialsEntity, error) {
	ret := _m.Called(ctx, userID, data)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCredentialsRole")
	}

	var r0 *dao.CredentialsEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, dao.UpdateCredentialsRoleData) (*dao.CredentialsEntity, error)); ok {
		return rf(ctx, userID, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, dao.UpdateCredentialsRoleData) *dao.CredentialsEntity); ok {
		r0 = rf(ctx, userID, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.CredentialsEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, dao.UpdateCredentialsRoleData) error); ok {
		r1 = rf(ctx, userID, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUpdateRoleSource_UpdateCredentialsRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCredentialsRole'
type MockUpdateRoleSource_UpdateCredentialsRole_Call struct {
	*mock.Call
}

// UpdateCredentialsRole is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - data dao.UpdateCredentialsRoleData
func (_e *MockUpdateRoleSource_Expecter) UpdateCredentialsRole(ctx interface{}, userID interface{}, data interface{}) *MockUpdateRoleSource_UpdateCredentialsRole_Call {
	return &MockUpdateRoleSource_UpdateCredentialsRole_Call{Call: _e.mock.On("UpdateCredentialsRole", ctx, userID, data)}
}

func (_c *MockUpdateRoleSource_UpdateCredentialsRole_Call) Run(run func(ctx context.Context, userID uuid.UUID, data dao.UpdateCredentialsRoleData)) *MockUpdateRoleSource_UpdateCredentialsRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(dao.UpdateCredentialsRoleData))
	})
	return _c
}

func (_c *MockUpdateRoleSource_UpdateCredentialsRole_Call) Return(_a0 *dao.CredentialsEntity, _a1 error) *MockUpdateRoleSource_UpdateCredentialsRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUpdateRoleSource_UpdateCredentialsRole_Call) RunAndReturn(run func(context.Context, uuid.UUID, dao.UpdateCredentialsRoleData) (*dao.CredentialsEntity, error)) *MockUpdateRoleSource_UpdateCredentialsRole_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUpdateRoleSource creates a new instance of MockUpdateRoleSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUpdateRoleSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUpdateRoleSource {
	mock := &MockUpdateRoleSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
