// Code generated by mockery v2.53.1. DO NOT EDIT.

package servicesmocks

import (
	context "github.com/a-novel-kit/context"
	dao "github.com/a-novel/service-authentication/internal/dao"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockSelectUserSource is an autogenerated mock type for the SelectUserSource type
type MockSelectUserSource struct {
	mock.Mock
}

type MockSelectUserSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSelectUserSource) EXPECT() *MockSelectUserSource_Expecter {
	return &MockSelectUserSource_Expecter{mock: &_m.Mock}
}

// SelectCredentials provides a mock function with given fields: ctx, id
func (_m *MockSelectUserSource) SelectCredentials(ctx context.Context, id uuid.UUID) (*dao.CredentialsEntity, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for SelectCredentials")
	}

	var r0 *dao.CredentialsEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*dao.CredentialsEntity, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *dao.CredentialsEntity); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.CredentialsEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSelectUserSource_SelectCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectCredentials'
type MockSelectUserSource_SelectCredentials_Call struct {
	*mock.Call
}

// SelectCredentials is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockSelectUserSource_Expecter) SelectCredentials(ctx interface{}, id interface{}) *MockSelectUserSource_SelectCredentials_Call {
	return &MockSelectUserSource_SelectCredentials_Call{Call: _e.mock.On("SelectCredentials", ctx, id)}
}

func (_c *MockSelectUserSource_SelectCredentials_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockSelectUserSource_SelectCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockSelectUserSource_SelectCredentials_Call) Return(_a0 *dao.CredentialsEntity, _a1 error) *MockSelectUserSource_SelectCredentials_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSelectUserSource_SelectCredentials_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*dao.CredentialsEntity, error)) *MockSelectUserSource_SelectCredentials_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSelectUserSource creates a new instance of MockSelectUserSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSelectUserSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSelectUserSource {
	mock := &MockSelectUserSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
